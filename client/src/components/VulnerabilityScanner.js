import React, { useState } from 'react';
import '../styles/VulnerabilityScanner.css';

function VulnerabilityScanner({ api }) {
  const [loading, setLoading] = useState(false);
  const [vulnerabilities, setVulnerabilities] = useState(null);
  const [error, setError] = useState(null);

  const scanVulnerabilities = async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await api.scanVulnerabilities();
      if (response.success) {
        setVulnerabilities(response.data);
      } else {
        setError(response.message || 'Erro ao escanear vulnerabilidades');
      }
    } catch (err) {
      setError(err.message || 'Erro ao conectar com servidor');
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (level) => {
    switch (level?.toUpperCase()) {
      case 'CRÍTICO':
        return '#ff0000';
      case 'ALTO':
        return '#ff4444';
      case 'MÉDIO':
        return '#ffaa00';
      case 'BAIXO':
        return '#ffcc00';
      case 'BOM':
        return '#00ff88';
      default:
        return '#888';
    }
  };

  const getScoreColor = (score) => {
    if (score >= 80) return '#00ff88';
    if (score >= 60) return '#ffcc00';
    if (score >= 40) return '#ffaa00';
    return '#ff4444';
  };

  return (
    <div className="vulnerability-scanner">
      <div className="scanner-header">
        <h2>🔍 Scanner de Vulnerabilidades</h2>
        <button
          className="btn-scan"
          onClick={scanVulnerabilities}
          disabled={loading}
        >
          {loading ? '⏳ Escaneando...' : '🛡️ Escanear Agora'}
        </button>
      </div>

      {error && (
        <div className="scanner-error">
          <span>❌</span> {error}
        </div>
      )}

      {vulnerabilities && (
        <div className="scanner-results">
          {/* Score de Segurança */}
          <div className="security-score-card">
            <div className="score-circle">
              <svg width="150" height="150">
                <circle
                  cx="75"
                  cy="75"
                  r="65"
                  stroke="#222"
                  strokeWidth="10"
                  fill="none"
                />
                <circle
                  cx="75"
                  cy="75"
                  r="65"
                  stroke={getScoreColor(vulnerabilities.score)}
                  strokeWidth="10"
                  fill="none"
                  strokeDasharray={`${(vulnerabilities.score / 100) * 408.4} 408.4`}
                  strokeLinecap="round"
                  transform="rotate(-90 75 75)"
                />
              </svg>
              <div className="score-text">
                <span className="score-number">{vulnerabilities.score || 0}</span>
                <span className="score-label">/100</span>
              </div>
            </div>
            <div className="score-info">
              <h3>Score de Segurança</h3>
              <p className="score-level" style={{ color: getSeverityColor(vulnerabilities.level) }}>
                {vulnerabilities.level}
              </p>
            </div>
          </div>

          {/* Protocolo de Segurança */}
          <div className="protocol-card">
            <div className="card-header">
              <h3>🔐 Protocolo de Segurança</h3>
            </div>
            <div className="card-body">
              <div className="protocol-info">
                <span className="protocol-label">Protocolo Atual:</span>
                <span className="protocol-value">{vulnerabilities.protocol || 'Desconhecido'}</span>
              </div>
            </div>
          </div>

          {/* Vulnerabilidades Detectadas */}
          {vulnerabilities.vulnerabilities && vulnerabilities.vulnerabilities.length > 0 ? (
            <div className="vulnerabilities-card">
              <div className="card-header">
                <h3>⚠️ Vulnerabilidades Detectadas</h3>
                <span className="vuln-count">
                  {vulnerabilities.vulnerabilities.length} encontrada(s)
                </span>
              </div>
              <div className="card-body">
                <div className="vulnerabilities-list">
                  {vulnerabilities.vulnerabilities.map((vuln, index) => (
                    <div key={index} className="vulnerability-item">
                      <div className="vuln-header">
                        <span
                          className="vuln-severity"
                          style={{ backgroundColor: getSeverityColor(vuln.level) }}
                        >
                          {vuln.level}
                        </span>
                        <h4>{vuln.type}</h4>
                      </div>
                      <p className="vuln-description">{vuln.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <div className="no-vulnerabilities">
              <div className="success-icon">✅</div>
              <h3>Nenhuma vulnerabilidade detectada</h3>
              <p>Sua rede está usando protocolos de segurança adequados</p>
            </div>
          )}

          {/* Recomendações */}
          {vulnerabilities.recommendations && vulnerabilities.recommendations.length > 0 && (
            <div className="recommendations-card">
              <div className="card-header">
                <h3>💡 Recomendações de Segurança</h3>
              </div>
              <div className="card-body">
                <ul className="recommendations-list">
                  {vulnerabilities.recommendations.map((rec, index) => (
                    <li key={index}>
                      <span className="rec-icon">→</span>
                      {rec}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {/* Guia de Níveis de Segurança */}
          <div className="security-guide-card">
            <div className="card-header">
              <h3>📚 Guia de Protocolos</h3>
            </div>
            <div className="card-body">
              <div className="protocol-guide">
                <div className="guide-item">
                  <span className="guide-icon" style={{ color: '#00ff88' }}>✓</span>
                  <div>
                    <strong>WPA3</strong>
                    <p>Padrão mais seguro disponível atualmente</p>
                  </div>
                </div>
                <div className="guide-item">
                  <span className="guide-icon" style={{ color: '#ffcc00' }}>⚠</span>
                  <div>
                    <strong>WPA2</strong>
                    <p>Seguro, mas recomenda-se upgrade para WPA3</p>
                  </div>
                </div>
                <div className="guide-item">
                  <span className="guide-icon" style={{ color: '#ffaa00' }}>⚠</span>
                  <div>
                    <strong>WPA</strong>
                    <p>Desatualizado, possui vulnerabilidades conhecidas</p>
                  </div>
                </div>
                <div className="guide-item">
                  <span className="guide-icon" style={{ color: '#ff4444' }}>✕</span>
                  <div>
                    <strong>WEP</strong>
                    <p>Inseguro! Pode ser quebrado em minutos</p>
                  </div>
                </div>
                <div className="guide-item">
                  <span className="guide-icon" style={{ color: '#ff0000' }}>✕</span>
                  <div>
                    <strong>Open/Aberta</strong>
                    <p>Extremamente inseguro! Sem criptografia</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Dicas de Segurança */}
          <div className="security-tips-card">
            <div className="card-header">
              <h3>🛡️ Dicas de Segurança</h3>
            </div>
            <div className="card-body">
              <div className="tips-grid">
                <div className="tip-item">
                  <span className="tip-icon">🔑</span>
                  <p>Use senhas com mínimo de 12 caracteres</p>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">🔄</span>
                  <p>Atualize firmware do roteador regularmente</p>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">🚫</span>
                  <p>Desabilite WPS se não for necessário</p>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">👁️</span>
                  <p>Monitore dispositivos conectados</p>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">🔒</span>
                  <p>Mude credenciais padrão do roteador</p>
                </div>
                <div className="tip-item">
                  <span className="tip-icon">📡</span>
                  <p>Configure rede de convidados separada</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default VulnerabilityScanner;
