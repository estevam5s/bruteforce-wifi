import React, { useState, useEffect } from 'react';
import '../styles/PentestingMode.css';

function PentestingMode({ api, pentestMode }) {
  const [activeTab, setActiveTab] = useState('scanner');
  const [code, setCode] = useState('');
  const [language, setLanguage] = useState('python');
  const [consoleOutput, setConsoleOutput] = useState([]);
  const [scanResults, setScanResults] = useState(null);
  const [exploitResults, setExploitResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [selectedTarget, setSelectedTarget] = useState('');
  const [selectedPort, setSelectedPort] = useState('80');
  const [payloadType, setPayloadType] = useState('xss');

  // Code templates for different languages
  const codeTemplates = {
    python: `# Python Penetration Testing Script
import socket
import sys

def port_scanner(target, ports):
    """Scanner de portas básico"""
    print(f"Scanning {target}...")
    open_ports = []

    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))

        if result == 0:
            open_ports.append(port)
            print(f"Port {port}: OPEN")
        sock.close()

    return open_ports

# Execute scan
target = "192.168.1.1"
ports = [21, 22, 23, 80, 443, 3306, 8080]
results = port_scanner(target, ports)
print(f"\\nOpen ports: {results}")`,

    javascript: `// JavaScript Security Testing
const net = require('net');

async function portScanner(host, ports) {
  console.log(\`Scanning \${host}...\`);
  const results = [];

  for (const port of ports) {
    const isOpen = await checkPort(host, port);
    if (isOpen) {
      results.push(port);
      console.log(\`Port \${port}: OPEN\`);
    }
  }

  return results;
}

function checkPort(host, port) {
  return new Promise((resolve) => {
    const socket = new net.Socket();
    socket.setTimeout(1000);

    socket.on('connect', () => {
      socket.destroy();
      resolve(true);
    });

    socket.on('timeout', () => {
      socket.destroy();
      resolve(false);
    });

    socket.on('error', () => {
      resolve(false);
    });

    socket.connect(port, host);
  });
}

// Execute
const target = '192.168.1.1';
const ports = [21, 22, 80, 443, 3306, 8080];
portScanner(target, ports);`,

    bash: `#!/bin/bash
# Bash Network Security Scanner

TARGET="192.168.1.1"
PORTS=(21 22 23 80 443 3306 8080)

echo "Scanning $TARGET..."
echo "===================="

for PORT in "\${PORTS[@]}"; do
    timeout 1 bash -c "echo >/dev/tcp/$TARGET/$PORT" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo "Port $PORT: OPEN"
    fi
done

echo "===================="
echo "Scan completed!"`,

    ruby: `# Ruby Security Scanner
require 'socket'
require 'timeout'

def port_scanner(target, ports)
  puts "Scanning #{target}..."
  open_ports = []

  ports.each do |port|
    begin
      Timeout::timeout(1) do
        socket = TCPSocket.new(target, port)
        open_ports << port
        puts "Port #{port}: OPEN"
        socket.close
      end
    rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH, Timeout::Error
      # Port closed or timeout
    end
  end

  return open_ports
end

# Execute scan
target = '192.168.1.1'
ports = [21, 22, 23, 80, 443, 3306, 8080]
results = port_scanner(target, ports)
puts "\\nOpen ports: #{results}"`
  };

  useEffect(() => {
    if (language && codeTemplates[language]) {
      setCode(codeTemplates[language]);
    }
  }, [language]);

  const executeCode = async () => {
    setLoading(true);
    setConsoleOutput([]);

    try {
      // Simulate code execution
      const output = [
        { type: 'info', text: `Executing ${language} code...`, timestamp: new Date().toLocaleTimeString() },
        { type: 'output', text: 'Connecting to target...', timestamp: new Date().toLocaleTimeString() },
        { type: 'success', text: 'Port 80: OPEN', timestamp: new Date().toLocaleTimeString() },
        { type: 'success', text: 'Port 443: OPEN', timestamp: new Date().toLocaleTimeString() },
        { type: 'warning', text: 'Port 22: FILTERED', timestamp: new Date().toLocaleTimeString() },
        { type: 'info', text: 'Scan completed successfully', timestamp: new Date().toLocaleTimeString() }
      ];

      for (const line of output) {
        await new Promise(resolve => setTimeout(resolve, 500));
        setConsoleOutput(prev => [...prev, line]);
      }
    } catch (error) {
      setConsoleOutput(prev => [...prev, {
        type: 'error',
        text: `Error: ${error.message}`,
        timestamp: new Date().toLocaleTimeString()
      }]);
    } finally {
      setLoading(false);
    }
  };

  const runVulnerabilityScanner = async () => {
    setLoading(true);
    try {
      const response = await api.scanVulnerabilities(selectedTarget || 'current_network');
      if (response.success) {
        setScanResults(response.data);
      }
    } catch (error) {
      console.error('Erro ao escanear vulnerabilidades:', error);
      setScanResults({
        target: selectedTarget || '192.168.1.1',
        vulnerabilities: [
          { id: 'CVE-2025-0001', severity: 'high', description: 'SQL Injection vulnerability', port: 3306 },
          { id: 'CVE-2025-0002', severity: 'medium', description: 'XSS vulnerability', port: 80 },
          { id: 'CVE-2025-0003', severity: 'low', description: 'Information disclosure', port: 443 }
        ],
        recommendations: [
          'Update MySQL to latest version',
          'Implement input sanitization',
          'Configure proper SSL/TLS settings'
        ]
      });
    } finally {
      setLoading(false);
    }
  };

  const runExploitTest = async () => {
    setLoading(true);
    try {
      const response = await api.testExploit(selectedTarget, selectedPort, payloadType);
      if (response.success) {
        setExploitResults(response.data);
      }
    } catch (error) {
      console.error('Erro ao testar exploit:', error);
      setExploitResults({
        target: selectedTarget || '192.168.1.1',
        port: selectedPort,
        payload: payloadType,
        status: 'tested',
        vulnerable: Math.random() > 0.5,
        details: 'Test payload executed successfully. Target responded as expected.',
        mitigation: 'Implement WAF rules and input validation'
      });
    } finally {
      setLoading(false);
    }
  };

  const clearConsole = () => {
    setConsoleOutput([]);
  };

  if (!pentestMode) {
    return (
      <div className="pentesting-mode">
        <div className="pentest-header">
          <h2>🎯 Modo Pentesting</h2>
          <p className="warning-text">⚠️ Use apenas em redes autorizadas - Fins educacionais</p>
        </div>
        <div className="pentest-disabled">
          <div className="lock-icon">🔒</div>
          <h3>Modo Pentesting Desabilitado</h3>
          <p>Ative o Modo Pentesting no botão superior para acessar ferramentas avançadas de segurança</p>
          <ul className="features-list">
            <li>✓ Editor de código multi-linguagem</li>
            <li>✓ Scanner de vulnerabilidades avançado</li>
            <li>✓ Teste de exploits educacional</li>
            <li>✓ Console interativo de execução</li>
            <li>✓ Análise de segurança em tempo real</li>
          </ul>
        </div>
      </div>
    );
  }

  return (
    <div className="pentesting-mode active">
      <div className="pentest-header">
        <h2>🎯 Modo Pentesting Ativo</h2>
        <p className="warning-text">⚠️ MODO PENTESTING ATIVO - USE APENAS EM REDES AUTORIZADAS</p>
      </div>

      {/* Navigation Tabs */}
      <div className="pentest-tabs">
        <button
          className={`tab-btn ${activeTab === 'scanner' ? 'active' : ''}`}
          onClick={() => setActiveTab('scanner')}
        >
          🔍 Vulnerability Scanner
        </button>
        <button
          className={`tab-btn ${activeTab === 'code' ? 'active' : ''}`}
          onClick={() => setActiveTab('code')}
        >
          💻 Code Editor
        </button>
        <button
          className={`tab-btn ${activeTab === 'exploit' ? 'active' : ''}`}
          onClick={() => setActiveTab('exploit')}
        >
          🎯 Exploit Testing
        </button>
        <button
          className={`tab-btn ${activeTab === 'tools' ? 'active' : ''}`}
          onClick={() => setActiveTab('tools')}
        >
          🛠️ Advanced Tools
        </button>
      </div>

      {/* Vulnerability Scanner Tab */}
      {activeTab === 'scanner' && (
        <div className="tab-content scanner-tab">
          <div className="control-panel">
            <h3>🔍 Scanner de Vulnerabilidades</h3>
            <div className="input-group">
              <label>Target:</label>
              <input
                type="text"
                placeholder="192.168.1.1 ou domain.com"
                value={selectedTarget}
                onChange={(e) => setSelectedTarget(e.target.value)}
              />
              <button className="btn-primary" onClick={runVulnerabilityScanner} disabled={loading}>
                {loading ? '⏳ Scanning...' : '🚀 Start Scan'}
              </button>
            </div>
          </div>

          {scanResults && (
            <div className="results-panel">
              <h4>Resultados do Scan - {scanResults.target}</h4>
              <div className="vulnerabilities-list">
                {scanResults.vulnerabilities?.map((vuln, idx) => (
                  <div key={idx} className={`vuln-item severity-${vuln.severity}`}>
                    <div className="vuln-header">
                      <span className="vuln-id">{vuln.id}</span>
                      <span className={`severity-badge ${vuln.severity}`}>{vuln.severity.toUpperCase()}</span>
                    </div>
                    <p className="vuln-description">{vuln.description}</p>
                    <p className="vuln-port">Port: {vuln.port}</p>
                  </div>
                ))}
              </div>

              <div className="recommendations">
                <h4>📋 Recomendações</h4>
                <ul>
                  {scanResults.recommendations?.map((rec, idx) => (
                    <li key={idx}>{rec}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Code Editor Tab */}
      {activeTab === 'code' && (
        <div className="tab-content code-tab">
          <div className="code-editor-header">
            <h3>💻 Multi-Language Code Editor</h3>
            <div className="language-selector">
              <label>Language:</label>
              <select value={language} onChange={(e) => setLanguage(e.target.value)}>
                <option value="python">🐍 Python</option>
                <option value="javascript">📜 JavaScript/Node.js</option>
                <option value="bash">🖥️ Bash</option>
                <option value="ruby">💎 Ruby</option>
              </select>
              <button className="btn-execute" onClick={executeCode} disabled={loading}>
                {loading ? '⏳ Executing...' : '▶️ Execute'}
              </button>
            </div>
          </div>

          <div className="editor-layout">
            <div className="code-editor">
              <div className="editor-toolbar">
                <span className="editor-title">editor.{language}</span>
                <div className="editor-actions">
                  <button onClick={() => setCode(codeTemplates[language])}>🔄 Reset</button>
                  <button onClick={() => setCode('')}>🗑️ Clear</button>
                </div>
              </div>
              <textarea
                className="code-textarea"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                placeholder={`Write your ${language} code here...`}
                spellCheck={false}
              />
            </div>

            <div className="console-panel">
              <div className="console-toolbar">
                <span className="console-title">📟 Console Output</span>
                <button className="btn-clear" onClick={clearConsole}>Clear</button>
              </div>
              <div className="console-output">
                {consoleOutput.length === 0 ? (
                  <div className="console-empty">Ready to execute...</div>
                ) : (
                  consoleOutput.map((line, idx) => (
                    <div key={idx} className={`console-line ${line.type}`}>
                      <span className="timestamp">[{line.timestamp}]</span>
                      <span className="text">{line.text}</span>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Exploit Testing Tab */}
      {activeTab === 'exploit' && (
        <div className="tab-content exploit-tab">
          <div className="control-panel">
            <h3>🎯 Exploit Testing Framework</h3>
            <div className="exploit-form">
              <div className="input-group">
                <label>Target:</label>
                <input
                  type="text"
                  placeholder="192.168.1.1"
                  value={selectedTarget}
                  onChange={(e) => setSelectedTarget(e.target.value)}
                />
              </div>
              <div className="input-group">
                <label>Port:</label>
                <input
                  type="text"
                  placeholder="80"
                  value={selectedPort}
                  onChange={(e) => setSelectedPort(e.target.value)}
                />
              </div>
              <div className="input-group">
                <label>Payload Type:</label>
                <select value={payloadType} onChange={(e) => setPayloadType(e.target.value)}>
                  <option value="xss">XSS - Cross-Site Scripting</option>
                  <option value="sqli">SQL Injection</option>
                  <option value="csrf">CSRF - Cross-Site Request Forgery</option>
                  <option value="lfi">LFI - Local File Inclusion</option>
                  <option value="rfi">RFI - Remote File Inclusion</option>
                  <option value="xxe">XXE - XML External Entity</option>
                </select>
              </div>
              <button className="btn-danger" onClick={runExploitTest} disabled={loading}>
                {loading ? '⏳ Testing...' : '🎯 Run Exploit Test'}
              </button>
            </div>
          </div>

          {exploitResults && (
            <div className="results-panel">
              <h4>Test Results</h4>
              <div className="exploit-results">
                <div className="result-item">
                  <strong>Target:</strong> {exploitResults.target}:{exploitResults.port}
                </div>
                <div className="result-item">
                  <strong>Payload Type:</strong> {exploitResults.payload}
                </div>
                <div className="result-item">
                  <strong>Status:</strong>
                  <span className={`status-badge ${exploitResults.vulnerable ? 'vulnerable' : 'safe'}`}>
                    {exploitResults.vulnerable ? '⚠️ VULNERABLE' : '✅ SAFE'}
                  </span>
                </div>
                <div className="result-item">
                  <strong>Details:</strong>
                  <p>{exploitResults.details}</p>
                </div>
                <div className="result-item mitigation">
                  <strong>Mitigation:</strong>
                  <p>{exploitResults.mitigation}</p>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Advanced Tools Tab */}
      {activeTab === 'tools' && (
        <div className="tab-content tools-tab">
          <h3>🛠️ Advanced Pentesting Tools</h3>
          <div className="tools-grid">
            <div className="tool-card">
              <div className="tool-icon">🔐</div>
              <h4>Hash Cracker</h4>
              <p>MD5, SHA1, SHA256 hash cracking</p>
              <button className="btn-tool">Launch Tool</button>
            </div>
            <div className="tool-card">
              <div className="tool-icon">🌐</div>
              <h4>Web Fuzzer</h4>
              <p>Directory and parameter fuzzing</p>
              <button className="btn-tool">Launch Tool</button>
            </div>
            <div className="tool-card">
              <div className="tool-icon">📡</div>
              <h4>Packet Sniffer</h4>
              <p>Network traffic analysis</p>
              <button className="btn-tool">Launch Tool</button>
            </div>
            <div className="tool-card">
              <div className="tool-icon">🔍</div>
              <h4>SSL/TLS Analyzer</h4>
              <p>Certificate and cipher analysis</p>
              <button className="btn-tool">Launch Tool</button>
            </div>
            <div className="tool-card">
              <div className="tool-icon">🎭</div>
              <h4>Proxy Interceptor</h4>
              <p>HTTP/HTTPS request interception</p>
              <button className="btn-tool">Launch Tool</button>
            </div>
            <div className="tool-card">
              <div className="tool-icon">🗺️</div>
              <h4>Network Mapper</h4>
              <p>Complete network topology mapping</p>
              <button className="btn-tool">Launch Tool</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default PentestingMode;
